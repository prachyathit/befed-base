<div id="map-modal" class="modal fade">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title">Pin your location <small>(Drag the marker or click on map to pin)</small></h4>
      </div>
      <div class="modal-body">
        <div class="row">
          <span class="tooltips col-xs-1">
            <span class="tooltipstext">Get my current location</span>
            <span id="currentLocationBtn" class="location-arrow-wrapper btn btn-danger">
              <i class="fa fa-location-arrow strong"></i>
            </span>
            <span class="spinning-icon-wrapper btn btn-danger hide"><i class="fa fa-spinner fa-spin strong"></i></span>
          </span>
          <div class="col-xs-11">
            <%= text_field_tag :modalLocationSearch, '', { placeholder: 'Search Google Maps', type: 'search', class: 'form-control' } %>
          </div>
        </div>
        <div id="map" style="height: 350px;">
          
        </div>
        <%= form_for(:saddress, url: submit_saddress_path, html: {id: 'sessionAddressForm'}) do |f| %>
          <%= f.hidden_field :address %>
          <%= f.hidden_field :latitude %>
          <%= f.hidden_field :longitude %>
          <%= hidden_field_tag :redirect_url, submit_url %>
        <% end %>
      </div>
      <div class="modal-footer">
        <a id="cancelAddress" href="javascript:;" class="btn btn-default">Cancel</a>
        <button id="useAddress" type="button" class="btn btn-primary">
          Use this address
        </button>
      </div>
    </div>
  </div>
</div>



<script type="text/javascript">
  var modalMap;
  var marker;
  var defaultLocation = {lat: 13.7563, lng: 100.5018};
  var currentPosition = defaultLocation;
  var address;
  var addressInput;
  var waiting = false;
  var markerDragging = false;

  function initialize() {
    initModalMap();
    if (currentPosition == defaultLocation) {
      getCurrentLocation().then(function(position){
        currentPosition = position;
        setMarkerToPosition();
        modalMap.setCenter(currentPosition);
      });
      modalMap.setCenter(currentPosition);
    }
  }

  // Note: This example requires that you consent to location sharing when
  // prompted by your browser. If you see the error "The Geolocation service
  // failed.", it means you probably did not give permission for the browser to
  // locate you.

  function initModalMap() {
    modalMap = new google.maps.Map(document.getElementById('map'), {
      center: currentPosition,
      zoom: 14,
      streetViewControl: false
    });
    modalMap.addListener('click', function(e){
      markerDragging = false;
      currentPosition = {
        lat: e.latLng.lat(),
        lng: e.latLng.lng()
      }
      modalMap.setCenter(currentPosition);
      setMarkerToPosition();
    });
    modalMap.addListener('resize', function(){});
    // modalMap.addListener('idle', function(){
    // });
    initAutoComplete();
    initGetCurrentLocation();
  }

  function displayModal(){
    $("#map-modal").modal({
      backdrop: 'static',
      keyboard: false
    });
    $("#map-modal").modal("show");
    $("#map-modal-edit").modal("show");

    if ("<%= (session[:saddress][:latitude].present? && session[:saddress][:longitude].present?) %>" == 'true') {
      currentPosition = { 
        lat: parseFloat("<%= session[:saddress][:latitude] %>"), 
        lng: parseFloat("<%= session[:saddress][:longitude] %>") };
    }
  }

  function initAutoComplete(){
    addressInput = document.getElementById('modalLocationSearch');
    var options = {
      // Restrict the search to Thailand
      componentRestrictions: {country: 'th'}
    };
    autocomplete = new google.maps.places.Autocomplete(addressInput, options);
    autocomplete.addListener('place_changed', function(){
      var place = autocomplete.getPlace();
      console.log(place);
      currentPosition = {
        lat: place.geometry.location.lat(),
        lng: place.geometry.location.lng()
      };
      modalMap.setCenter(currentPosition);
      setMarkerToPosition();
    });
  }

  function initGetCurrentLocation(){
    $("#currentLocationBtn").click(function() {
      getCurrentLocation().then(function(position){
        currentPosition = position;
        setMarkerToPosition();
      });
      $(".location-arrow-wrapper").addClass("hide");
      $(".spinning-icon-wrapper").removeClass("hide");
    });
  }

  function getCurrentLocation(){
    // Try HTML5 geolocation.
    if (navigator.geolocation) {
      return new Promise(function(resolve, reject) {
        navigator.geolocation.getCurrentPosition(function(position) {
          pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };

          $(".location-arrow-wrapper").removeClass("hide");
          $(".spinning-icon-wrapper").addClass("hide");
          
          resolve(pos);
        }, function() {
          // Cannot get location
          alert("We can't locate your current location. Please grant a permission in your browser to locate your device");

          $(".location-arrow-wrapper").removeClass("hide");
          $(".spinning-icon-wrapper").addClass("hide");

          reject("We can't locate your current location. Please grant a permission in your browser to locate your device");
        });
      });
    } else {
      // Browser doesn't support Geolocation
      alert('Your browser doesn\'t support geolocation.');
      $(".location-arrow-wrapper").removeClass("hide");
      $(".spinning-icon-wrapper").addClass("hide");

      return new Promise(function(resolve, reject) {
        reject('Your browser doesn\'t support geolocation.');
      });
    }
    
  }

  function setMarkerToPosition(){
    if(marker == null) {
      var icon = {
          url: "<%= image_url('marker.png') %>",
          scaledSize: new google.maps.Size(50, 50) // scaled size
      };
      marker = new google.maps.Marker({
        position: currentPosition,
        map: modalMap,
        // title: 'Hello World!',
        icon: icon,
        draggable: true
      });
      marker.addListener('mousedown', function(event){
        console.log('mouse Down');
        markerDragging = true;
      });
      marker.addListener('mouseup', function(event){
        console.log('mouse Up');
        markerDragging = false;
      });
      marker.addListener('mouseout', function(event){
        
        if (markerDragging) {
          console.log('mouse Out');
          marker.setPosition(event.latLng);
        }
      });
      marker.addListener('dragend', function(event) {
        console.log('drag END');
        currentPosition = marker.position;
        markerDragging = false;
        geocodeLatLng();
      });
      marker.addListener('dragstart', function(event) {
        console.log('drag START');
        markerDragging = true;
      });
      // marker.addListener('drag', function(event) {
      //   console.log('drag');
      //   // markerDragging = true;
      // });
    } else {
      if (marker.position != currentPosition) {
        // console.log("MARKER change POS")
        marker.setMap(null);
        marker.setPosition(currentPosition);
        marker.setMap(modalMap);
        geocodeLatLng();  
      }
    }
  }

  function addEventListener() {
    $('#useAddress').on('click', function(){
      $('#sessionAddressForm #saddress_address').val(JSON.stringify(address));
      $('#sessionAddressForm #saddress_latitude').val(currentPosition.lat);
      $('#sessionAddressForm #saddress_longitude').val(currentPosition.lng);
      $('#sessionAddressForm').submit();
    });
    $('#cancelAddress').on('click', function(){
      window.location = "<%= return_url || cancel_url %>";
    });

    $('#map-modal').on('shown.bs.modal', function(e) {
      google.maps.event.trigger(modalMap, "resize");
    });
  }

  function urlContainParam(param) {
    var url = window.location.href;
    if((url.indexOf('?' + param + '=') != -1) ||
        (url.indexOf('&' + param + '=') != -1))
      return true;
    return false
  }

  function geocodeLatLng() {
      var geocoder = new google.maps.Geocoder;
      geocoder.geocode({'location': currentPosition}, function(results, status) {
        if (status == google.maps.GeocoderStatus.OK) {
          if (results[1]) {
            address = {};
            results[0].address_components.forEach(function(component){
              if(component.types.includes('street_number')){
                address['house_room_no'] = component.long_name;
              } else if(component.types.includes('premise')){
                address['building_name'] = component.long_name;
              } else if(component.types.includes('route')){
                address['street'] = component.long_name;
              } else if(component.types.includes('sublocality_level_1')){
                address['district'] = component.long_name;
              } else if(component.types.includes('sublocality_level_2')){
                address['subdistrict'] = component.long_name;
              } else if(component.types.includes('locality') && 
                  component.types.includes('political')){
                address['province'] = component.long_name;
              } else if(component.types.includes('postal_code')){
                address['postal_code'] = component.long_name;
              } else if(component.types.includes('country')){
              }
            });
            addressInput.value = results[1].formatted_address;
          } else {
            addressInput.value = " ";
          }
          addressInput.className = addressInput.className.replace(" loadinggif", "");
          waiting = false;
        } else if(status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT){
          console.log('Geocoder failed due to: ' + status);
          if (!waiting) {
            addressInput.value = " ";
            addressInput.className += " loadinggif";
            waiting = true;
            setTimeout(function() {
              geocodeLatLng();
            }, 1000);
          }
        }
      });
    }

</script>
<script async defer
  src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCwhcezDLA4hI2yH4uZxzKTKH_y1RoONUY&callback=initialize&libraries=places">
</script>